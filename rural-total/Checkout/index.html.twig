{% extends 'FlexyFtwoStoreBundle:Layout:base.html.twig' %}

{% set aliquotObjects = [] %}
{% for cart in carts if cart.items|length > 0 %}
    {% set cartProducts = [] %}
    {% for item in cart.items %}
    	{% set cartProducts = cartProducts|merge([{
    		"itemRef": item.variant.referenceCode,
    		"itemQuantity": item.quantity
         }]) %}
    {% endfor %}
    {% set aliquotObjects = aliquotObjects|merge([{
    	"shoppingStoreRef": cart.shoppingStore.referenceCode,
    	"products":cartProducts
    }]) %}
{% endfor %}

{% set aliquotVar = aliquotObjects|json_encode() %}

{% block javascriptHead %}
    {% if store.googleReCaptcha.isActive %}
        {{ store.googleReCaptcha.scriptTagHeadV3|raw }}
    {% endif %}
{% endblock %}

{% set title = "Finalizar pedido" %}
{% set customer = flexy_ftwo_current_customer() %}
{% set usesTaxSubstitution = customer.usesTaxSubstitution %}

{% set config = flexy_ftwo_configuration_stores("CALCULATE_IPI_INDEPENDENT_OF_ICMS") %}

{% if cart.sales.count == 0 %}
    {% set showShippingIpi = config is same as("1") %}
{% else %}
    {% set showShippingIpi = false %}

    {% for cart in cart.sales if not showShippingIpi %}
        {% set showShippingIpi = showShippingIpi or (config[cart.shoppingStore.id] is same as("1")) %}
    {% endfor %}
{% endif %}

{% block content %}
    {% include 'FlexyFtwoStoreBundle:Include:alerts.html.twig' with {'alerts' : app.session.flashbag.get('store-checkout-error'),'error' : true} %}
    {% include 'FlexyFtwoStoreBundle:Include/Modal:add-address.html.twig' %}
    <section>
        <div class="second-page-container">
            <div class="container">
                {% include 'FlexyFtwoStoreBundle:Include:breadcrumbs.html.twig' with {path : [{'title' : 'Checkout'}]} %}
                <form action="{{ path("flexy_ftwo_store_checkout_finish") }}" method="post" enctype="multipart/form-data">
                    {% if store.googleReCaptcha.isActive %}
                        {{ store.googleReCaptcha.tokenV3|raw }}
                    {% endif %}
                    {% include 'FlexyFtwoStoreBundle:AntiFraud:antiFraudCheckoutSnippetCode.html.twig' %}
                    {% for item in cart.items %}
                        <input type="hidden" class="product-destination-address" name="checkout[product][{{ item.variant.id }}][address]" checked/>
                        <input type="hidden" class="product-shipping-method" name="checkout[product][{{ item.variant.id }}][shippingMethod]" />
                        <input type="hidden" class="product-shipping-method-scheduled-deliver" name="checkout[product][{{ item.variant.id }}][scheduledDeliveryPeriod]" />
                    {% endfor %}

                    <input type="hidden" id="is-purchase-of-digital-products" name="is-purchase-of-digital-products" value="{{ cart.isOnlyDigitalProduct}}" />

                    <div class="row">
                        <article class="col-md-9">
                            <div class="box-border block-form wow fadeInLeft" data-wow-duration="1s">
                                <div class="row address-box">
                                	<div class="col-md-12">
                                        <h3><i class="fa fa-truck"></i> Endereço de entrega</h3>
                                    </div>
                                	<div class="col-md-6">
                                    	<label class="control-label">Selecione um endereço:</label>

                                        {% for address in addresses %}

                                            {% set address_checked = '' %}

                                            {% if address.defaultShipping == 1 or loop.first %}
                                                {% set address_checked = 'checked' %}
                                            {% endif %}

                                            <div class="radio">
                                                <label>
                                                    <input type="radio" value="{{ address.id }}" name="address" class="address" data-postcode="{{ address.postCode }}" {{ address_checked }} required/>
                                                    {{ address }}

                                                </label>
                                            </div>
                                        {% endfor %}
                                        <div class="new-address-btn"><a href="javascript:void(0);" class="add-address" data-toggle="modal" data-target="#add-address">Cadastrar novo endereço</a></div> <br/>
                                    </div>
									<div class="col-md-6">
                                        {% if cart.hasSales %}
                                            <div id="shipping-list">
                                                {% set shoppingStoreId = (cart.shoppingStore)?cart.shoppingStore.id:null %}
                                                <div class="shipping-estimate shipping-methods-shopping-{{ shoppingStoreId }}">
                                                    {% if not cart.isOnlyDigitalProduct %}
                                                    <label>Selecione um endereço para entrega</label>
                                                    {% endif %}
                                                </div>
                                            </div>
                                        {% else %}
                                            <div class="shipping-method-list">
                                                {% if not cart.isOnlyDigitalProduct %}
                                                <label>Selecione um endereço para entrega</label>
                                                {% endif %}
                                            </div>
                                        {% endif %}
                                    </div>

                                </div>

                                <div class="checkbox no-icms" {{ usesTaxSubstitution ? '' : 'style="display: none;"' }}>
                                    <label>
                                        <input type="checkbox" {{ usesTaxSubstitution ? 'checked' : '' }} name="checkout[isResale]" id="isResale" value="1"/> Sobre esta compra deverá incidir ICMS-ST
                                    </label>
                                </div>
                                {% include 'FlexyFtwoStoreBundle:Checkout:orderAttributeValues.html.twig' %}
                                <div class="payment-box">
                                    <h3><i class="fa fa-credit-card"></i> Forma de pagamento</h3>
                                    <!-- Nav tabs -->
                                    <ul class="nav nav-tabs" role="tablist">
                                        {% set paymentMethodActive = false %}
                                        {% set paymentMethodActiveKeys = [] %}
                                        {% for pkey,payment in availablePaymentMethods if pkey matches "/payment.method.creditcard/" %}
                                            <li  id="tab-credit-card" role="presentation" class="active">
                                                <a href="#credit-card" aria-controls="home" role="tab" data-toggle="tab">
                                                    <ul class="card-icon-list">
                                                        {% for pkey,payment in availablePaymentMethods if (payment is iterable and pkey matches "/payment.method.creditcard/") %}
                                                            {% for key,value in payment|reverse|slice(0,5) %}
                                                                <li>
                                                                    <img class="img-responsive" src="{{ flexy_ftwo_resource_url_img("img/bandeira/" ~ (key|replace({'payment.method.creditcard.' : ''})) ~ ".png") }}"/>
                                                                </li>
                                                            {% endfor %}
                                                        {% endfor %}
                                                    </ul>
                                                    <label>Cartão de Crédito</label>
                                                </a>
                                            </li>
                                            {% set paymentMethodActiveKeys = paymentMethodActiveKeys|merge({'credit-card' : 'credit-card'}) %}
                                            {% set paymentMethodActive = true %}
                                        {% endfor %}
                                        {% for pkey,payment in availablePaymentMethods if pkey == "payment.method.deposit" %}
                                            <li id="tab-bank-deposit" role="presentation" {{ not paymentMethodActive ? 'class="active"' : '' }}>
                                                <a href="#deposit" aria-controls="profile" role="tab" data-toggle="tab">
                                                    <img src="{{ flexy_ftwo_resource_url_img("img/logo_deposit.png") }}" class="img-responsive">
                                                    <label>Depósito bancário</label>
                                                </a>
                                            </li>
                                            {% set paymentMethodActiveKeys = paymentMethodActiveKeys|merge({'deposit' : 'deposit'}) %}
                                            {% set paymentMethodActive = true %}
                                        {% endfor %}
                                        {% for pkey,payment in availablePaymentMethods if pkey == "payment.method.boleto" %}
                                            <li id="tab-boleto"  role="presentation" {{ not paymentMethodActive ? 'class="active"' : '' }}>
                                                <a href="#boleto" aria-controls="messages" role="tab" data-toggle="tab">
                                                    <img src="{{ flexy_ftwo_resource_url_img("img/logo_boleto.png") }}" class="img-responsive">
                                                    <label>Boleto</label>
                                                </a>
                                            </li>
                                            {% set paymentMethodActiveKeys = paymentMethodActiveKeys|merge({'boleto' : 'boleto'}) %}
                                            {% set paymentMethodActive = true %}
                                        {% endfor %}

                                        {% for pkey,payment in availablePaymentMethods if pkey == "payment.method.pix" %}
                                            <li  id="tab-pix"  role="presentation" {{ not paymentMethodActive ? 'class="active"' : '' }}>
                                                <a href="#pix" aria-controls="messages" role="tab" data-toggle="tab">
                                                    <img src="{{ flexy_ftwo_resource_url_img("img/logo_pix.png") }}" class="img-responsive">
                                                    <label>PIX</label>
                                                </a>
                                            </li>
                                            {% set paymentMethodActiveKeys = paymentMethodActiveKeys|merge({'pix' : 'pix'}) %}
                                            {% set paymentMethodActive = true %}
                                        {% endfor %}

                                        {% for pkey,payment in availablePaymentMethods if pkey == "payment.method.digitalwallet" %}
                                            <li  id="tab-digital-wallet"  role="presentation" {{ not paymentMethodActive ? 'class="active"' : '' }}>
                                                <a href="#digitalwallet" aria-controls="messages" role="tab" data-toggle="tab">
                                                    <img src="{{ flexy_ftwo_resource_url_img("img/logo_digital_wallets.png") }}" class="img-responsive">
                                                    <label>Carteira Digital</label>
                                                </a>
                                            </li>
                                            {% set paymentMethodActiveKeys = paymentMethodActiveKeys|merge({'digitalwallet' : 'digitalwallet'}) %}
                                            {% set paymentMethodActive = true %}
                                        {% endfor %}

                                        {% for pkey,payment in availablePaymentMethods if pkey == "payment.method.boletoafaturar" %}
                                            <li id="tab-boleto-faturar"  role="presentation" {{ not paymentMethodActive ? 'class="active"' : '' }}>
                                                <a href="#boletoafaturar" aria-controls="messages" role="tab" data-toggle="tab">
                                                    <img src="{{ flexy_ftwo_resource_url_img("img/bandeira/faturar.png") }}" class="img-responsive">
                                                    <label>Boleto a faturar</label>
                                                </a>
                                            </li>
                                            {% set paymentMethodActiveKeys = paymentMethodActiveKeys|merge({'boletoafaturar' : 'boletoafaturar'}) %}
                                            {% set paymentMethodActive = true %}
                                        {% endfor %}
                                        {% for pkey,payment in availablePaymentMethods if pkey == "payment.method.negotiable" %}
                                            <li  id="tab-negotiable"  role="presentation" {{ not paymentMethodActive ? 'class="active"' : '' }}>
                                                <a href="#negotiable" aria-controls="messages" role="tab" data-toggle="tab">
                                                    <img src="{{ flexy_ftwo_resource_url_img("img/icon_negotiable.png") }}" class="img-responsive">
                                                    <label>A combinar</label>
                                                </a>
                                            </li>
                                            {% set paymentMethodActiveKeys = paymentMethodActiveKeys|merge({'negotiable' : 'negotiable'}) %}
                                            {% set paymentMethodActive = true %}
                                        {% endfor %}
                                        {% for pkey,payment in availablePaymentMethods if pkey == "payment.method.forfree" %}
                                            <li id="tab-forfree" role="presentation" {{ not paymentMethodActive ? 'class="active"' : '' }} style="display:none;">
                                                <a  href="#forfree" aria-controls="messages" role="tab" data-toggle="tab">
                                                    <img src="{{ flexy_ftwo_resource_url_img("img/icon_negotiable.png") }}" class="img-responsive">
                                                    <label id="teste-3">{{ payment == 'Grátis' ? 'Cupom de desconto' : payment }}</label>
                                                </a>
                                            </li>
                                            {% set paymentMethodActiveKeys = paymentMethodActiveKeys|merge({'forfree' : 'forfree'}) %}
                                            {% set paymentMethodActive = true %}
                                        {% endfor %}
                                    </ul>
                                    <!-- Tab panes -->
                                    <div class="payment-tabs tab-content tab-content-new">
                                        {% set displayTab = false %}
                                        {% if activeTab is not defined and 'credit-card' in paymentMethodActiveKeys %}
                                            {% set activeTab = true %}
                                            {% set displayTab = true %}
                                        {% endif %}
                                        <div role="tabpanel" class="tab-pane {{ displayTab  ? 'active' : ''}} payment-method-fields" id="credit-card">
                                            <div class="title-pagamento">ESCOLHA A BANDEIRA DE SEU CARTÃO</div>
                                            <!-- Nav tabs -->
                                            <ul class="nav nav-tabs" role="tablist">
                                                {% for pkey,payment in availablePaymentMethods if (payment is iterable and pkey matches "/payment.method.creditcard/") %}
                                                    {% for key,value in payment %}
                                                        <li>
                                                            <label>
                                                                <input type="radio" name="checkout[paymentMethod][0][name]" value="{{ key }}" style="display:none" required/>
                                                                <img src="{{ flexy_ftwo_resource_url_img("img/bandeira/" ~ (key|replace({'payment.method.creditcard.' : ''})) ~ ".png") }}"/>
                                                            </label>
                                                        </li>
                                                    {% endfor %}
                                                {% endfor %}
                                            </ul>
                                            <!-- Tab panes -->
                                            <div class="form-group" align="center">
                                                <div class="row">
                                                    <label class="text-right col-xs-12 col-sm-4">Titular do Cartão:</label>
                                                    <div class="col-xs-10 col-sm-6 col-md-6">
                                                        <input type="text" name="checkout[paymentMethod][0][data][holder]" class="form-control" required>
                                                    </div>
                                                </div>
                                            </div>
                                            {% if subscriptionPlans|length > 0 %}
                                                <div class="form-group" align="center">
                                                    <div class="row">
                                                        <label class="text-right col-xs-12 col-sm-4">Planos de assinatura:</label>
                                                        <div class="col-xs-10 col-sm-6 col-md-6">
                                                            <select class="form-control" name="checkout[subscription_plan_id]" {% if hasAnySubscriptionPlanMandatory %}required{% endif %}>
                                                                {% if not hasAnySubscriptionPlanMandatory %}
                                                                    <option value>{{ 'plan.none'|trans({}, 'frontend') }}</option>
                                                                {% endif %}
                                                                {% for subscription_plan in subscriptionPlans %}
                                                                    <option value="{{ subscription_plan.id }}">{{ subscription_plan.name }} ({{ subscription_plan.numberOfRecurrences }}x -  cobrado {{ subscription_plan.intervalBetweenRecurrencesLabel|lower }})</option>
                                                                {% endfor %}
                                                            </select>
                                                        </div>
                                                    </div>
                                                </div>
                                            {% endif %}
                                            <div style="{{ customer.cpf ? 'display:none;' : '' }}">
                                                <div class="form-group" align="center">
                                                    <div class="row">
                                                        <label class="text-right col-xs-12 col-sm-4">Número do CPF:</label>
                                                        <div class="col-xs-10 col-sm-6 col-md-6">
                                                            <input type="text" name="checkout[paymentMethod][0][data][cpf]" value="{{ customer.cpf ? customer.cpf.cpf : "" }}" class="flexy-input-cpf form-control col-xs-10 col-sm-6 col-md-6" required>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="form-group" align="center">
                                                    <div class="row">
                                                        <label class="text-right col-xs-12 col-sm-4">Data de Nascimento:</label>
                                                        <div class="col-xs-10 col-sm-6 col-md-6">
                                                            <input type="text" name="checkout[paymentMethod][0][data][birthDate]" value="{{ customer.dateOfBirth ? customer.dateOfBirth|date('d/m/Y') : "" }}" class="flexy-input-date form-control" required>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group" align="center">
                                                <div class="row">
                                                    <label class="text-right col-xs-12 col-sm-4">Número do Cartão:</label>
                                                    <div class="col-xs-10 col-sm-6 col-md-6">
                                                        <input type="text" name="checkout[paymentMethod][0][data][number]" class="flexy-input-creditcard form-control" required>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group" align="center">
                                                <div class="row">
                                                    <label class="text-right col-xs-12 col-sm-4">Data de Validade:</label>
                                                    <div class="col-xs-10 col-sm-6 col-md-6">
                                                        <div class="input-group">
                                                            <select class="form-control" name="checkout[paymentMethod][0][data][expirationMonth]" required>
                                                                <option value="">Mês</option>
                                                                {% for month in 1..12 %}
                                                                    <option value="{{ month }}">{{ month }}</option>
                                                                {% endfor %}
                                                            </select>
                                                            <span class="input-group-addon">/</span>
                                                            {% set actualYear = date()|date("Y") %}
                                                            {% set maxYear = actualYear + 10 %}
                                                            <select class="form-control" name="checkout[paymentMethod][0][data][expirationYear]" required>
                                                                <option value="">Ano</option>
                                                                {% for year in actualYear..maxYear %}
                                                                    <option value="{{ year }}">{{ year }}</option>
                                                                {% endfor %}
                                                            </select>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group" align="center">
                                                <div class="row">
                                                    <label class="text-right col-xs-12 col-sm-4">Código de Segurança:</label>
                                                    <div class="col-xs-10 col-sm-6 col-md-6">
                                                        <input type="text" class="flexy-input-cvv form-control" name="checkout[paymentMethod][0][data][cvv]" required/>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group" align="center">
                                                <div class="row">
                                                    <label class="text-right col-xs-12 col-sm-4">Parcelas:</label>
                                                    <div class="col-xs-10 col-sm-6 col-md-6">
                                                        <select class="form-control" name="checkout[paymentMethod][0][data][installments]" required>
                                                            <option value="">Selecione uma bandeira e um método de envio.</option>
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        {% set displayTab = false %}
                                        {% if not activeTab and 'deposit' in paymentMethodActiveKeys %}
                                            {% set activeTab = true %}
                                            {% set displayTab = true %}
                                        {% endif %}
                                        <div role="tabpanel" class="tab-pane {{ displayTab  ? 'active' : ''}}" id="deposit">
                                            <input type="radio" name="checkout[paymentMethod][0][name]" value="payment.method.deposit" style="display: none;" required/>
                                            <p class="text-left">{{ (flexy_ftwo_payment_method_deposit_info() ?: '')|nl2br }}</p>
                                        </div>

                                        {% set displayTab = false %}
                                        {% if not activeTab and 'boleto' in paymentMethodActiveKeys %}
                                            {% set activeTab = true %}
                                            {% set displayTab = true %}
                                        {% endif %}
                                        <div role="tabpanel" class="tab-pane {{ displayTab  ? 'active' : ''}}" id="boleto">
                                            <input type="radio" name="checkout[paymentMethod][0][name]" value="payment.method.boleto" style="display: none;" required/>

                                            <p class="title-pagamento">PAGUE POR BOLETO BANCÁRIO</p><br>
                                            <img src="{{ flexy_ftwo_resource_url_img("img/logo_boleto.png") }}" class="center"><br>
                                            <p class="text-cartao">Uma nova janela será aberta assim que você clicar no botão 'Confirmo a compra' para confirmar seu pedido. </p>
                                        </div>

                                        {% set displayTab = false %}
                                        {% if not activeTab and 'pix' in paymentMethodActiveKeys %}
                                            {% set activeTab = true %}
                                            {% set displayTab = true %}
                                        {% endif %}
                                        <div role="tabpanel" class="tab-pane {{ displayTab  ? 'active' : ''}}" id="pix">
                                            <input type="radio" name="checkout[paymentMethod][0][name]" value="payment.method.pix" style="display: none;" required/>

                                            <p class="title-pagamento">PAGUE POR PIX</p><br>
                                            <img src="{{ flexy_ftwo_resource_url_img("img/logo_pix.png") }}" class="center"><br>
                                            <p class="text-cartao">Uma nova janela será aberta assim que você clicar no botão 'Finalizar compra' para confirmar seu pedido. O qrcode aparece na página de detalhes do pedido e o pagamento será realizado através dessa tela.</p>
                                        </div>

                                        {% set displayTab = false %}
                                        {% if not activeTab and 'digitalwallet' in paymentMethodActiveKeys %}
                                            {% set activeTab = true %}
                                            {% set displayTab = true %}
                                        {% endif %}
                                        <div role="tabpanel" class="tab-pane {{ displayTab  ? 'active' : ''}}" id="digitalwallet">
                                            <div class="title-pagamento">ESCOLHA A SUA CARTEIRA DIGITAL</div>
                                            <ul class="nav nav-wallets">
                                                {% for pkey,payment in availablePaymentMethods if (payment is iterable and pkey matches "/payment.method.digitalwallet/") %}
                                                    {% for key,value in payment %}
                                                        <li {% if (key matches "/applepay/") %} id="onlySafari" {% endif %}>
                                                                <label >
                                                                    <input id="{{ (key|replace({'payment.method.' : ''}))|replace({'.' : '-'}) }}" type="radio" name="checkout[paymentMethod][0][name]" value="{{ key }}" style="display:none"/>
                                                                    <img src="{{ flexy_ftwo_resource_url_img("img/" ~ (key|replace({'payment.method.digitalwallet.' : ''})) ~ ".png") }}"/>
                                                                </label>
                                                        </li>
                                                    {% endfor %}
                                                {% endfor %}
                                            </ul>
                                            <p class="text-cartao">Uma nova janela será aberta assim que você clicar no botão 'Finalizar compra' para confirmar seu pedido. O botão para pagamento aparece na página de detalhes do pedido e o pagamento será realizado através dessa tela. Talvez nem todas as carteiras digitais sejam compatíveis com seu dispositivo, e por esse motivo ela pode não ser exibida aqui </p>
                                        </div>

                                        {% set displayTab = false %}
                                        {% if not activeTab and 'boletoafaturar' in paymentMethodActiveKeys %}
                                            {% set activeTab = true %}
                                            {% set displayTab = true %}
                                        {% endif %}
                                        <div role="tabpanel" class="tab-pane {{ displayTab  ? 'active' : ''}}" id="boletoafaturar">
                                            <input type="radio" name="checkout[paymentMethod][0][name]" value="payment.method.boletoafaturar" style="display: none;" required/>
                                            <div class="boleto-faturar-rules"></div>
                                        </div>

                                        {% set displayTab = false %}
                                        {% if not activeTab and 'negotiable' in paymentMethodActiveKeys %}
                                            {% set activeTab = true %}
                                            {% set displayTab = true %}
                                        {% endif %}
                                        <div role="tabpanel" class="tab-pane {{ displayTab  ? 'active' : ''}}" id="negotiable">
                                            <input type="radio" name="checkout[paymentMethod][0][name]" value="payment.method.negotiable" style="display: none;" required/>
                                            <p>A forma de pagamento será combinada posteriormente.</p>
                                        </div>

                                        {% set displayTab = false %}
                                        {% if not activeTab and 'forfree' in paymentMethodActiveKeys %}
                                            {% set activeTab = true %}
                                            {% set displayTab = true %}
                                        {% endif %}
                                        <div role="tabpanel" class="tab-pane {{ displayTab  ? 'active' : ''}}" id="forfree" >
                                            <input type="radio" name="checkout[paymentMethod][0][name]" value="payment.method.forfree" style="display: none;" required/>
                                            <p>Seu pagamento será feito através do cupom de desconto .</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        	<div id="total-absolute-referee"></div>
                        </article>
                        <article class="col-md-3">
                            <div class="block-form block-order-total box-border wow fadeInRight" data-wow-duration="1s">
                                <h3><i class="fa fa-dollar"></i>Totais</h3>
                                <ul class="list-unstyled">
                                    <li>Subtotal: <span>R$ {{ cart.itemsTotalWithDiscount|number_format(2, ',', '.') }}</span></li>
                                    <li>Frete: <span>R$&nbsp;<span class="shipping-total">{{ 0|number_format(2, ',', '.') }}</span></span></li>
                                    {% if cart.salePromotionDiscountTotal > 0 %}
                                    	<li>
                                            Descontos: <span class="discount-total">- R$ <span class="discount-total-value">{{ cart.salePromotionDiscountTotal|number_format(2, ',', '.') }}</span></span>
                                        </li>
									{% endif %}
                                    <li class="aliquot" style="display: none">Alíquotas: <span>R$&nbsp;<span class="aliquot-total">{{ 0|number_format(2, ',', '.') }}</span></span></li>
                                    <li class="icms" style="display: none">ICMS ST: <span>R$&nbsp;<span class="icms-total">{{ 0|number_format(2, ',', '.') }}</span></span></li>
                                    <li class="shipping-ipi" style="display: none">IPI do Frete: <span>R$&nbsp;<span class="shipping-ipi-total">{{ 0|number_format(2, ',', '.') }}</span></span></li>
                                    <li class="addition-boleto">Acréscimo boleto: <span>R$&nbsp;<span class="addition-boleto-total">{{ 0|number_format(2, ',', '.') }}</span></span></li>
                                    <li class="discount-boleto">Desconto boleto: <span>- R$&nbsp;<span class="discount-boleto-total">{{ 0|number_format(2, ',', '.') }}</span></span></li>
                                    <li class="discount-deposit">Desconto depósito: <span>- R$&nbsp;<span class="discount-deposit-total">{{ 0|number_format(2, ',', '.') }}</span></span></li>
                                    <li class="discount-creditcard" style="display: none;">Desconto cartão: <span>- R$&nbsp;<span class="discount-creditcard-total">{{ 0|number_format(2, ',', '.') }}</span></span></li>
                                    <li class="discount-negotiable">Desconto à combinar: <span>- R$&nbsp;<span class="discount-negotiable-total">{{ 0|number_format(2, ',', '.') }}</span></span></li>
                                    <li class="discount-pix">Desconto pix: <span>- R$&nbsp;<span class="discount-pix-total">{{ 0|number_format(2, ',', '.') }}</span></span></li>
                                    <li class="discount-applepay">Desconto Apple Pay: <span>- R$&nbsp;<span class="discount-applepay-total">{{ 0|number_format(2, ',', '.') }}</span></span></li>
                                    <li class="discount-picpay">Desconto PicPay: <span>- R$&nbsp;<span class="discount-picpay-total">{{ 0|number_format(2, ',', '.') }}</span></span></li>
                                    <li id="installments-tax" hidden="hidden"><label class="number-of-installments">Juros para parcelamento em X vezes:</label><span>R$&nbsp;<span class="installments-tax-total">{{ 0|number_format(2, ',', '.') }}</span></span></li>
                                    <li><hr></li>
                                    </ul>
                                    <ul class="list-unstyled" style="display: none;" id="aliquots">
                                        <li class="aliquot" style="display: none">Alíquotas: <span>R$&nbsp;<span class="aliquot-total">{{ 0|number_format(2, ',', '.') }}</span></span></li>
                                    </ul>
                                    <ul class="list-unstyled">
                                    <li><b>Total:</b> <span>R$&nbsp;<span class="billing-total">{{ cart.billingTotal|number_format(2, ',', '.') }}</span></span></li>
                                    <li><hr></li>
                                </ul>
                                <button type="submit" class="btn btn-light-blue btn-checkout col-md-12"><i class="fa fa-check-circle"></i> &nbsp;&nbsp;Finalizar compra</button>
                            </div>
                        </article>
                    </div>
                </form>
            </div>
        </div>
    </section>
{% endblock %}

{% block javascript %}
    {% if store.googleReCaptcha.isActive %}
        {{ store.googleReCaptcha.scriptTagFooterV3|raw }}
    {% endif %}

    <script src="{{ asset('bundles/flexyftwostore/js/checkout/document-attribute.js') }}"></script>
    <script src="{{ asset('bundles/flexyftwostore/js/checkout/CheckoutShippingDiscountCalculator.js') }}"></script>
    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            function isSafariNavigator() {
                var isSafari = navigator.vendor && navigator.vendor.indexOf('Apple') > -1 &&
                    navigator.userAgent &&
                    navigator.userAgent.indexOf('CriOS') == -1 &&
                    navigator.userAgent.indexOf('FxiOS') == -1;
                if(!isSafari) {
                    divApplePay = document.querySelector('#onlySafari');
                    divApplePay.style.display = 'none';
                }
            }
            document.getElementById("tab-digital-wallet")
                ?.addEventListener("click", isSafariNavigator);
        });
    </script>
    <script>
        {% set variantIds = [] %}
        {% for item in cart.allItems %}
            {% set variantIds = variantIds|merge([item.variant.id]) %}
        {% endfor %}

        var billingTotal = Number("{{ cart.billingTotal }}"),
            billingTotalWithTaxes = 0,
            billingTotalWithTaxesWithoutShippingIpiTotal = 0,
            shippingTotal = 0,
            icmsTotal = 0,
            shippingIpiTotal = 0,
            totalBillingDiscount = 0,
            aliquotsValue = 0,
            shippingDiscount = 0,
            paymentDiscount = 0;

        (function($) {
            var aliquotCalculator;

            var rawData = "{{aliquotVar}}";

            rawData = rawData.replace(/&quot;/g, '\"');
            
            var aliquotsData = JSON.parse(rawData);

            var isPurchaseDigitalProducts = $('#is-purchase-of-digital-products').val();
           
            $(document).ready(function(){
                aliquotCalculator = new Aliquot();
                
                for(cartObject of aliquotsData) {
                    for(productObject of cartObject.products) {
                        aliquotCalculator.addVariant(productObject.itemRef, productObject.itemQuantity);
                    }
                }
            });

            function setAliquotVariables(shippingTotal, paymentMethodDiscount, billingTotal) {
                if(aliquotCalculator) {
                    $(".address").each(function(i, el) {
                        if($(el).prop('checked')) {
                            aliquotCalculator.setDestinyPostcode($(el)[0].dataset.postcode);
                        }
                    })

                    if(shippingTotal) {
                        aliquotCalculator.setShippingTotal(shippingTotal);
                    }

                    if(paymentMethodDiscount) {
                        aliquotCalculator.setPaymentMethodDiscount(paymentMethodDiscount);
                    }

                    aliquotCalculator.setBillingTotal(billingTotal - shippingTotal);
                }
            }

            function recalculateAliquots(billingTotal) {
                $("#aliquots").hide();
 	            aliquotCalculator.resetResponse();
 	            aliquotCalculator.makeCartRequest().then((response) => {

                    let cart = response.carts;
                    let shouldDisplayAliquots = false;

                    var paymentMethod = $("[name='checkout[paymentMethod][0][name]']:checked").val() || "",
                        isDeposit = paymentMethod === "payment.method.deposit",
                        isNegotiable = paymentMethod === "payment.method.negotiable",
                        isPix = paymentMethod == "payment.method.pix",
                        isApplePay = paymentMethod == "payment.method.digitalwallet.applepay",
                        isPicPay = paymentMethod == "payment.method.digitalwallet.picpay",
                        depositDiscount = 0,
                        negotiableDiscount = 0,
                        discountPix = 0,
                        discountApplePay = 0,
                        discountPicPay = 0,
                        billingTotalWithAliquots = billingTotal + shippingIpiTotal - paymentDiscount,
                        aliquotsTotal = 0;

                        paymentDiscount = 0;

                    for (carts in cart) {
                        let items = cart[carts].items;
                        for (item in items) {
                            if (items[item].itemDataToAliquotCalculation) {
                                let varCode = items[item].itemDataToAliquotCalculation.variantReferenceCode;
                                let aliquotas = items[item].aliquots;

                                let aliquotsRefCodes = [];

                                for (aliquot in aliquotas) {
                                        aliquotsRefCodes.push(aliquotas[aliquot].referenceCode);
                                        shouldDisplayAliquots = true;
                                }

                                aliquotCalculator.markAliquotForItem(item, aliquotsRefCodes);
                            }
                        }
                    }

                    if (shouldDisplayAliquots) {
                        aliquotsTotal = response.aliquotsSum;
                        const formatNumber = new Intl.NumberFormat();
                        const aliquotsUl = document.getElementById("aliquots");
                        while (aliquotsUl.firstChild) {
                            aliquotsUl.removeChild(aliquotsUl.firstChild);
                        };
                        for (aliquot in response.totals) {
                            if (response.totals[aliquot].value != 0) {
                                let li = document.createElement("li");
                                li.innerHTML = response.totals[aliquot].name + ": R$ " + $.number(response.totals[aliquot].value, 2, ',', '.');
                                aliquotsUl.append(li);
                            }
                        }

                        billingTotalWithAliquots = billingTotal + aliquotsTotal + shippingIpiTotal - paymentDiscount;
                        let li = document.createElement("li");
                        let hr = document.createElement("hr");
                        let negrito = document.createElement("b");
                        if(aliquotsTotal > 0) {
                            aliquotsValue = aliquotsTotal;
                            negrito.innerHTML = "Total de Alíquotas:";
                            li.append(negrito);
                            li.append(" R$ " + $.number(aliquotsTotal, 2, ',', '.'));
                            li.setAttribute("class", "aliquots-total");
                            aliquotsUl.append(li);
                            aliquotsUl.append(hr);
                            $("#aliquots").show();
                        } else {
                            $("#aliquots").hide();
                            $(".icms").hide();
                            $(".billing-total").html($.number(billingTotal + shippingIpiTotal, 2, ',', '.'));
                        }
                    } else {
                        $("#aliquots").hide();
                        $(".icms").hide();
                        $(".billing-total").html($.number(billingTotal + shippingIpiTotal, 2, ',', '.'));
                    }

                    if (isDeposit) {
                        depositDiscount = (billingTotalWithAliquots - shippingTotal) * Number("{{ (store.paymentMethod.deposit)?store.paymentMethod.deposit.discount/100 : null }}");
                        paymentDiscount = depositDiscount;
                    }

                    if (isNegotiable) {
                        negotiableDiscount = (billingTotalWithAliquots - shippingTotal) * Number("{{ store.paymentMethod.negotiable.discount / 100 }}");
                        paymentDiscount = negotiableDiscount;
                    }

                    if (isPix) {
                        discountPix = (billingTotalWithAliquots - shippingTotal) * Number("{{ store.paymentMethod.pix.discount / 100 }}");
                        paymentDiscount = discountPix;
                    }

                    if (isApplePay) {
                        discountApplePay = (billingTotalWithAliquots - shippingTotal) * Number("{{ store.paymentMethod.applepay.discount / 100 }}");
                        paymentDiscount = discountApplePay;
                    }

                    if (isPicPay) {
                        discountPicPay = (billingTotalWithAliquots - shippingTotal) * Number("{{ store.paymentMethod.picpay.discount / 100 }}");
                        paymentDiscount = discountPicPay;
                    }

                    if (!parseFloat(discountPix)) {
                        $('.discount-pix').hide();
                    }

                    if (!parseFloat(discountApplePay)) {
                        $('.discount-applepay').hide();
                    }

                    if (!parseFloat(discountPicPay)) {
                        $('.discount-picpay').hide();
                    }

                    if (depositDiscount > 0 && isDeposit) {
                        $(".discount-deposit").show();
                    } else {
                        $(".discount-deposit").hide();
                    }

                    if (negotiableDiscount > 0 && isNegotiable) {
                        $(".discount-negotiable").show();
                    } else {
                        $(".discount-negotiable").hide();
                    }

                    var billingTotalWithAliquotsAndDiscount = billingTotal + aliquotsTotal + shippingIpiTotal - paymentDiscount;

                    $(".discount-deposit-total").html($.number(depositDiscount, 2, ',', '.'));
                    $(".discount-deposit-total").attr("data-discount", depositDiscount);
                    $(".discount-negotiable-total").html($.number(negotiableDiscount, 2, ',', '.'));
                    $(".discount-negotiable-total").attr("data-discount", negotiableDiscount);
                    $(".discount-pix-total").html($.number(discountPix, 2, ',', '.'));
                    $(".discount-applepay-total").html($.number(discountApplePay, 2, ',', '.'));
                    $(".discount-picpay-total").html($.number(discountPicPay, 2, ',', '.'));
                    $(".billing-total").html($.number(billingTotalWithAliquotsAndDiscount, 2, ',', '.'));
                });
            }

            const VARIANT_IDS = {{ variantIds|json_encode }};

            function getSelectedPaymentMethodElement() {
                return $(".active [name='checkout[paymentMethod][0][name]']").first();
            }

            function selectDefaultPaymentMethod() {
                getSelectedPaymentMethodElement().attr('checked', 'checked');
            }

            function removePreSelectedCreditCard() {
                if (
                    getSelectedPaymentMethodElement().val()
                    && getSelectedPaymentMethodElement().val().indexOf('payment.method.creditcard') !== -1
                ) {
                    getSelectedPaymentMethodElement().removeAttr('checked');
                }
            }

            function removePreSelectedDigitalWallet() {
                if (
                    getSelectedPaymentMethodElement().val()
                    && getSelectedPaymentMethodElement().val().indexOf('payment.method.digitalwallet') !== -1
                ) {
                    getSelectedPaymentMethodElement().removeAttr('checked');
                }
            }

            function buildShippifyScheduledDeliveriesPeriodsContainer(shippifyScheduledDeliveries, uniqueId) {
                let firstShippifyScheduledDelivery = shippifyScheduledDeliveries[0],
                    html = '<div id="containerShippifyScheduledDeliveryPeriods_' + firstShippifyScheduledDelivery.shippingMethodConfigurationId.split(':').pop() + '" class="shipping-estimate scheduled-shippify-options hidden">' +
                        '<strong>Horários de entrega:</strong><br/>',
                    currentDay = '',
                    radioInputName = uniqueId ? ("shipping-method-" + uniqueId) : "shipping";

                shippifyScheduledDeliveries.sort(function (period1, period2) {
                    if (period1.scheduledPeriodOrder > period2.scheduledPeriodOrder) {
                        return 1;
                    }
                    if (period1.scheduledPeriodOrder < period2.scheduledPeriodOrder) {
                        return -1;
                    }
                    return 0;
                });

                shippifyScheduledDeliveries.forEach(function(period, index) {
                    let shippingMethodValue = getShippingMethodValue(period),
                        periodDay = period.deliveryTimeFrom.split(' ').shift();

                    if (currentDay !== periodDay) {
                        html += '<b style="margin-left:10px;"> Dia ' + periodDay + '</b><br/>';
                        currentDay = periodDay;
                    }

                    html += '<div class="radio">' +
                        '<label style="margin-left:25px;">' +
                        '<input type="radio" class="shipping-method scheduled-shippify-option" name="' + radioInputName + '" data-price="' + period.price + '" value="' + shippingMethodValue + '"> ' +
                            'Das ' + period.deliveryTimeFrom.split(currentDay).join('') + ' até ' + period.deliveryTimeTo + ' horas.' +
                            (period.price > 0 ? ' R$ ' + String((Math.round(period.price * 100) / 100).toFixed(2)).replace('.', ',') : '') +
                        '</label>' +
                    '</div>';
                });
                return html + '</div>';
            }

            function buildScheduledDeliveryPeriodsContainer(shippingMethodDto, shoppingStoreId) {
                if (!(shippingMethodDto.isCarrier || shippingMethodDto.isWithdrawal)) {
                    return '';
                }

                let periods = shippingMethodDto.deliveryScheduledPeriods;

                if (periods === null || periods.length < 1) {
                    return '';
                }

                let scheduledDeliveryTitle = 'Horários de ' + (shippingMethodDto.isWithdrawal ? 'retirada' : 'entrega') + ':',
                    shippingMethodValue = getShippingMethodValue(shippingMethodDto),
                    shippingMethod = shippingMethodValue.replace(/\./g, '_');

                let scheduledDeliveryPeriods = '<div id="containerScheduledDeliveryPeriods_' + shoppingStoreId
                    + '_' + shippingMethod.replace(/\|/g, '-')
                    + '" class="hidden shipping-estimate containerScheduledDeliveryPeriods' + shoppingStoreId
                    + '">' + '<strong>' + scheduledDeliveryTitle + '</strong><br/>';

                let date = null;

                for (let i = 0; i < periods.length; i++) {
                    let periodValue = periods[i].date + '_' + periods[i].deliveryTimeFrom.substr(0, 5) + '|'
                        + periods[i].date + '_' + periods[i].deliveryTimeTo.substr(0, 5) + '|' + periods[i].id;

                    let dateToPrint = '';
                    if (periods[i].date != date) {
                        dateToPrint = '<b style="margin-left:10px;"> Dia ' + periods[i].date + '</b><br/>';
                        date = periods[i].date;
                    }

                    scheduledDeliveryPeriods += dateToPrint +
                        '<div class="radio">' +
                            '<label style="margin-left:25px;">' +
                                '<input type="radio" name="scheduledDelivery' + shoppingStoreId + '"' +
                                    'data-shopping-store="' + shoppingStoreId + '" class="scheduledDelivery scheduledDelivery' + shoppingStoreId + '"' +
                                    'value="' + periodValue + '">' +
                                        'Das ' + periods[i].deliveryTimeFrom + ' às ' + periods[i].deliveryTimeTo +
                            '</label>' +
                        '</div>';
                }

                return scheduledDeliveryPeriods + '</div>';
            }

            function isShippifyScheduledDelivery(shippingMethodDto) {
                let regexMatch = shippingMethodDto.name.match(/shipping\.method\.shippify\:SLOTS/);
                return Boolean(regexMatch);
            }

            function isShippifyDelivery(shippingMethodDto) {
                let regexMatch = shippingMethodDto.name.match(/shipping\.method\.shippify/);
                return Boolean(regexMatch);
            }

            function isMaisEntregas(shippingMethodDto) {
                let regexMatch = shippingMethodDto.name.match(/shipping\.method\.maisentregas/);
                return Boolean(regexMatch);
            }

            function getShippingMethodValue(shippingMethodDto) {
                if (shippingMethodDto.isCarrier) {
                    return shippingMethodDto.name + '_' + shippingMethodDto.shippingServiceCode;
                }

                return '' + shippingMethodDto.shippingMethodConfigurationId;
            }

            function changeScheduledDeliveryPeriod(shoppingStoreId) {
                $('.scheduledDelivery' + shoppingStoreId).click(function (e) {
                    let scheduledDeliveryPeriod = $(this).val();
                    $('.product-scheduled-delivery-period, .product-shipping-method-scheduled-deliver').each(function() {
                        let input = $(this);
                        if (input.data('shopping-store') == shoppingStoreId) {
                            input.val(scheduledDeliveryPeriod);
                        }
                    });
                });
            }

            function togglePeriod(shoppingStoreId) {
                let $destinyElement = $('.shipping-method' + (shoppingStoreId ? '-' + shoppingStoreId : ''));
                $destinyElement.on("click", function() {
                    $('.scheduledDelivery' + shoppingStoreId).prop('checked', false);
                    $('#shopping-store-shipping-' + shoppingStoreId + ' .product-scheduled-delivery-period').val('');
                    $('#shopping-store-shipping-' + shoppingStoreId + ' .product-shipping-method-scheduled-deliver').val('');
                    if ($(this).hasClass("scheduledDelivery")) {
                        return '';
                    }
                    $('.containerScheduledDeliveryPeriods' + shoppingStoreId).addClass('hidden');

                    let $parentElement = $destinyElement.parents(".shipping-method-list").first();

                    let isScheduledShippify = $(this).hasClass('scheduled-shippify-option');

                    if ($(this).is(':checked') === true && !isScheduledShippify) {
                        $parentElement.children('.scheduled-shippify-options').first().addClass('hidden');
                        $parentElement.find('.shipping-method-shippify').first().removeProp('checked');
                    }

                    if ($(this).is(':checked') === true) {
                        $('#containerScheduledDeliveryPeriods_' + shoppingStoreId + '_' + $(this)[0].value.replace(/\./g, '_')).removeClass('hidden');
                    }

                    if ($(this).is(':checked') === false) {
                        $('#containerScheduledDeliveryPeriods_' + $(this)[0].value.replace(/\./g, '_')).addClass('hidden');
                    }
                });
            }

            function loadShippingMethodsSingleCart(addressId) {
                if(!addressId) {
                    return false;
                }

                $(".product-destination-address").val(addressId);

                let shippingEstimateSuccess = function (response) {

                    let $shippingMethodList = $(".shipping-method-list"),
                       html = "<label class=''>Selecione uma forma de entrega:</label><br>", i = 0, key;

                    if(!response || (Object.keys(response).length === 1 && response['general'])){
                        html =
                            "<label style='font-size: 13px' >"
                                + "Nenhum método de entrega disponível para o endereço selecionado."
                            + "</label>";
                    }

                    let $shippingObservations = [],
                        shippifyScheduledDeliveries = [];

                    if (response != '') {
                        for (key in response) {
                            if (key != 'general' && typeof response[key] === 'object') {
                                i++;

                                let shippingMethodDto = response[key],
                                    shippingMethodValue = shippingMethodDto.isCarrier
                                        ? shippingMethodDto.name + '_' + shippingMethodDto.shippingServiceCode
                                        : shippingMethodDto.shippingMethodConfigurationId;

                                if (isShippifyScheduledDelivery(shippingMethodDto)) {
                                    shippifyScheduledDeliveries.push(shippingMethodDto);
                                    continue;
                                }

                                if (shippingMethodDto.isAxado || shippingMethodDto.isTranspoFrete) {
                                    shippingMethodValue = shippingMethodDto.name;
                                }

                                if (shippingMethodDto.observations) {
                                    $shippingObservations[shippingMethodDto.presentation] = shippingMethodDto.observations;
                                }

                                let pickUpOnPlaceAnyTime = false,
                                    isPickUpOnPlace = shippingMethodDto.name == "shipping.method.pickuponplace",
                                    fromOrTo = isPickUpOnPlace ? ' a partir de ' : ' até ';

                                let pickUpOnPlaceAddress = '';

                                if (isPickUpOnPlace && shippingMethodDto.deliveryTimeTo == 0) {
                                    pickUpOnPlaceAnyTime = true;
                                }

                                if (isPickUpOnPlace) {
                                    pickUpOnPlaceAddress = "{{ store.info.distributionCenter.street|trim }}"
                                        ? " <small>({{ store.info.distributionCenter.street ? store.info.distributionCenter.street|trim ~ ', ' : '' }}" +
                                        "{{ store.info.distributionCenter.number ? store.info.distributionCenter.number  ~ ', ' : '' }}" +
                                        "{% if store.info.distributionCenter.complement == true %}{{ store.info.distributionCenter.complement }}, {% endif %}" +
                                        "{{ store.info.distributionCenter.district ? store.info.distributionCenter.district ~ ', ' : '' }}" +
                                        "{{ store.info.distributionCenter.city ? store.info.distributionCenter.city ~ ', ' : '' }}" +
                                        "{{ store.info.distributionCenter.state ? store.info.distributionCenter.state ~ ', ' : '' }}" +
                                        "{% if store.info.distributionCenter.postcode %}{{ store.info.distributionCenter.postcode[:5] }}-{{ store.info.distributionCenter.postcode[5:] }}, {% endif %}" +
                                        "{{ store.info.distributionCenter.country ? store.info.distributionCenter.country : '' }})</small>"
                                        : ""
                                }

                                let shippingTotalTime = shippingMethodDto.deliveryTimeTo;

                                if (shippingMethodDto.isWithdrawal && !isNaN(shippingMethodDto.withdrawalTimeFrom)) {
                                    shippingTotalTime = shippingMethodDto.deliveryTimeTo + shippingMethodDto.withdrawalTimeFrom;
                                }

                                let timePresentation = fromOrTo + shippingTotalTime + ' '
                                    + (shippingTotalTime == 1 ? 'dia' : 'dias');
                                if (isShippifyDelivery(shippingMethodDto)) {
                                    timePresentation =
                                        ' De ' + shippingMethodDto.deliveryTimeFrom
                                        + ' até ' + shippingMethodDto.deliveryTimeTo + ' horas.';
                                }

                                html += (
                                    '<div class="radio">' +
                                        '<label>' +
                                            '<input type="radio" class="shipping-method" name="shipping" data-price="'
                                            + shippingMethodDto.price + '" value="' + shippingMethodValue + '" '
                                            + (i == 0 ? 'required' : '') + '> ' +

                                            shippingMethodDto.presentation +
                                            (pickUpOnPlaceAnyTime
                                                ? ''
                                                : timePresentation) +
                                                (shippingMethodDto.price > 0 ? ' R$ ' + String(Number(shippingMethodDto.price).toFixed(2)).replace('.', ',') : '') +
                                                (isPickUpOnPlace ? pickUpOnPlaceAddress : '') +
                                        '</label>' +
                                    '</div>' + buildScheduledDeliveryPeriodsContainer(shippingMethodDto, '')
                                );
                            }
                        }
                    }

                    if (shippifyScheduledDeliveries.length) {
                        let firstShippifyScheduledDelivery = shippifyScheduledDeliveries[0],
                            value = firstShippifyScheduledDelivery.shippingMethodConfigurationId.split(':').pop();

                        html += '<div class="radio">' +
                                '<label>' +
                                    '<input type="radio" class="shipping-method-shippify" name="shipping-shippify-'
                                     + value + '" value="' + value + '" >' +

                                    firstShippifyScheduledDelivery.presentation +
                                '</label>' +
                            '</div>' + buildShippifyScheduledDeliveriesPeriodsContainer(shippifyScheduledDeliveries, false);
                    }

                    if (Object.keys($shippingObservations).length > 0) {
                        html += '<div class="shipping-alerts">'
                            + '<h5><small>Observações:</small></h5>';

                        for (let presentation in $shippingObservations) {
                            html +=
                                '<p><small><cite>'+
                                '<strong>'+presentation+'</strong>: '
                                +$shippingObservations[presentation]
                            +'</cite></small></p>';
                        }
                        html += '</div>';
                    }

                    $shippingMethodList.html(html).find("input").change(function () {
                        if ($(this).hasClass("scheduledDelivery")) {
                            return '';
                        }

                        $(".product-shipping-method").val($(this).val());
                        $(".product-shipping-method-scheduled-deliver").val('');

                        shippingTotal = Number($(this).data('price'));

                        shippingDiscount = 0;

                        {% if cart.getSubSalesCoupon.promotion.discountMoney %}
                            shippingDiscount = {{ cart.getRemainingCouponDiscount }};
                        {% elseif cart.getSubSalesCoupon.promotion.discountPercent %}
                            shippingDiscount = Math.round(shippingTotal * {{ cart.getRemainingCouponDiscount }}) / 100;
                        {% endif %}

                        shippingDiscount = Math.min(shippingDiscount, shippingTotal);

                        recalculatePrice();
                        toggleFreePaymentMethod();
                        loadBoletoRules();
                    });

                    togglePeriod('');

                    $(".scheduledDelivery").change(function() {
                        $(".product-shipping-method-scheduled-deliver").val($(this).val());
                    });
                };
                $.ajax({
                    url : '{{ path('flexy_ftwo_store_checkout_shipping_methods') }}',
                    method : 'post',
                    data : {
                        address_id : addressId,
                        variant_ids : VARIANT_IDS
                    },
                    beforeSend : function() {
                        $(".product-shipping-method").val('');
                        $('input:radio[name=address]').attr('disabled', true);
                        $('input:radio[name=address]').parent().css({ 'opacity' : 0.5 });
                        $(".shipping-method-list").html("<i class=\"fa fa-spinner fa-spin\"></i> <label><strong>Buscando métodos de entrega...</strong></label>");
                    },
                    success : function(response) {
                        if(response.shippingMethodGroupDtos && !isPurchaseDigitalProducts){
                           var shippingMethodGroupDtos = Object.entries(response.shippingMethodGroupDtos).shift();
                               if(shippingMethodGroupDtos[1].shippingMethodDto.general){
                                    alert(shippingMethodGroupDtos[1].shippingMethodDto.general)
                               }
                        }

                        if(response.general){
                            alert(response.general)
                        }

                        $(".product-shipping-method").val('');
                        $('input:radio[name=address]').attr('disabled', false);
                        $('input:radio[name=address]').parent().css({ 'opacity' : 1 });

                        if (isPurchaseDigitalProducts) {
                            $(".shipping-method-list").html("Os itens que compõem o pedido são todos digitais sendo assim não demandam entrega.");
                            return;
                        }

                        shippingEstimateSuccess(response);
                    },
                    error : function() {
                        if (isPurchaseDigitalProducts) {
                            $(".shipping-method-list").html("Os itens que compõem o pedido são todos digitais sendo assim não demandam entrega.");
                            return;
                        }

                        $(".shipping-method-list").html("<label>Erro ao buscar métodos de entrega. <a href=\".\">Recarregue a página e tente novamente.</a></label>");
                    }
                });
            }

            function loadShippingMethodsForAllCartsByAddress(addressId, postcode) {
                if (isNaN(addressId) || addressId == '') {
                    return;
                }

                function uniqueId() {
                    return (new Date().getTime()).toString(32) + Math.floor((Math.random() * 100) + 1);
                }

                let shippingMethodName = ''
                function shippingEstimateSuccess(response) {

                    let shippingListContainer = $("#shipping-list");
                    shippingListContainer.empty();

                    function cartOfDigitalProductsOnly(shoppingStoreCart) {
                        let isOnlyDigitalProduct = true;

                        $.each(shoppingStoreCart, function(key, item) {
                           if (item.is_digital_product === false) {
                             isOnlyDigitalProduct = false;
                             return false;
                           }
                        })

                        return isOnlyDigitalProduct;
                    }

                    $.each(response.shippingMethodGroupDtos, function(i, shippingMethodGroup) {
                        let shoppingStore = shippingMethodGroup.shoppingStoreDto
                                ? shippingMethodGroup.shoppingStoreDto.id
                                : '';

                        if (response.cartsItemsDtos[i]) {
                          if (cartOfDigitalProductsOnly(response.cartsItemsDtos[i])) {
                            return false;
                          }
                        }

                        shippingListContainer.append("<div class=\"shopping-store-shipping\" id=\"shopping-store-shipping-"+shoppingStore+"\" data-has-shipping-discount=\""+ shippingMethodGroup.hasShippingDiscount +"\">");

                        let uid = uniqueId(),
                            shoppingStoreShippingContainer = $('#shopping-store-shipping-'+i),
                            $shippingDestinationClass = '.shipping-methods-shopping' + (shoppingStore ? '-' + shoppingStore : ''),
                            $shippingDestinationShoppingStoreName =  '.shopping-store-shipping-address' + (shoppingStore ? '-' + shoppingStore : '');

                        shoppingStoreShippingContainer.attr('referenceCode', shippingMethodGroup.shoppingStoreDto.referenceCode)

                        function generateInputHidden(item, inputClass, name, index = null, value = null) {
                            let input = document.createElement("input");

                            input.setAttribute("type", "hidden");
                            input.setAttribute("class", "product-"+inputClass);
                            input.setAttribute("name", "checkout[product]["+item.stock_id+"]"+"["+name+"]");
                            input.setAttribute("data-variant-id", item.variant_id);

                            if(value){
                                input.setAttribute("value", value);
                            }

                            if (index) {
                                input.setAttribute("data-shopping-store", index);
                            }

                            return input;
                        }

                        $.each(response.cartsItemsDtos[i], function(key, item){
                            shoppingStoreShippingContainer.append(generateInputHidden(item, "shipping-method", "shippingMethod", i));
                            shoppingStoreShippingContainer.append(generateInputHidden(item, "shipping-method-is-freedelivery", "shippingMethodIsFreeDelivery", i, false));
                            shoppingStoreShippingContainer.append(generateInputHidden(item, "scheduled-delivery-period", "scheduledDeliveryPeriod", i));
                            shoppingStoreShippingContainer.append(generateInputHidden(item, "destination-address", "address"));
                        });

                        shoppingStoreShippingContainer.append("<div class=\""+$shippingDestinationShoppingStoreName.substr(1)+"\"><p><b>"+shippingMethodGroup.shoppingStoreDto.name+"</b></p></div>");
                        shoppingStoreShippingContainer.append("<div class=\"shipping-estimate "+$shippingDestinationClass.substr(1)+"\"></div>");
                        shoppingStoreShippingContainer.append("<div class=\""+'shipping-errors' + (shoppingStore ? '-' + shoppingStore : '')+"\"></div>");
                        shoppingStoreShippingContainer.append("<div class=\""+'shipping-observations' + (shoppingStore ? '-' + shoppingStore : '')+"\"></div>");

                        let $shippingErrors = $('.shipping-errors' + (shoppingStore ? '-' + shoppingStore : '')),
                            $shippingobservations = $('.shipping-observations' + (shoppingStore ? '-' + shoppingStore : '')).html("");

                        $.each(shippingMethodGroup.errorMessages, function(j,message) {
                            $shippingErrors.append('<p class=\"hidden\"><small><cite><strong>' + j + ': </strong> ' + message + '</cite></small></p>');
                        });

                        let $destinyElement = $($shippingDestinationClass);

                        $.each(shippingMethodGroup.shippingMethodDto, function(j,shippingMethodDto) {
                            if (shippingMethodDto.observations) {
                                $shippingobservations.append('<p><small><cite><strong>'+shippingMethodDto.presentation+'</strong>: '+shippingMethodDto.observations+'</cite></small></p>');
                            }
                        });

                        let shippifyScheduledDeliveries = [];

                        let shippingMethodDtoLength = Object.keys(shippingMethodGroup.shippingMethodDto).length;
                        let errorMessagesLength = Object.keys(shippingMethodGroup.errorMessages).length;

                        if(shippingMethodDtoLength == errorMessagesLength ){
                            $destinyElement.append("<p>Não existem formas de entrega desta loja para o seu endereço.</p>");
                        }

                        $.each(shippingMethodGroup.shippingMethodDto, function(j, shippingMethodDto) {
                            if(j != 'general' && typeof shippingMethodGroup.shippingMethodDto[j] === 'object') {
                                let shippingMethodValue = shippingMethodDto.isCarrier
                                    ? shippingMethodDto.name + '_' + shippingMethodDto.shippingServiceCode
                                    : shippingMethodDto.shippingMethodConfigurationId;

                                if (shippingMethodDto.isTranspoFrete) {
                                    shippingMethodValue = shippingMethodDto.name;
                                }

                                let pickUpOnPlaceAnyTime = false,
                                    isPickUpOnPlace = shippingMethodDto.name == "shipping.method.pickuponplace",
                                    fromOrTo = isPickUpOnPlace ? ' a partir de ' : ' até ';

                                if (isPickUpOnPlace && shippingMethodDto.deliveryTimeTo == 0) {
                                    pickUpOnPlaceAnyTime = true;
                                }

                                let pickUpOnPlaceAddress = '';

                                if(isPickUpOnPlace) {
                                    pickUpOnPlaceAddress = shippingMethodDto.pickupOnPlaceAddress
                                        ? "<small>(" + shippingMethodDto.pickupOnPlaceAddress + ")</small>"
                                        : '';
                                }

                                if (isShippifyScheduledDelivery(shippingMethodDto)) {
                                    shippifyScheduledDeliveries.push(shippingMethodDto);
                                    return true;
                                }

                                shippingTotalTime = parseInt(shippingMethodDto.deliveryTimeTo) + (shippingMethodDto?.withdrawalTimeFrom ? shippingMethodDto?.withdrawalTimeFrom : 0);
                                let timePresentation = fromOrTo + shippingTotalTime + ' '
                                    + (shippingTotalTime == 1 ? 'dia' : 'dias');

                                if (isShippifyDelivery(shippingMethodDto)) {
                                    timePresentation = ' De ' + shippingMethodDto.deliveryTimeFrom  + ' até ' + shippingMethodDto.deliveryTimeTo + ' horas.';
                                }

                                if (isMaisEntregas(shippingMethodDto)) {
                                    if (shippingMethodDto.deliveryTimeToMinutes > 480) {
                                        var deliveryDays = Math.ceil(shippingMethodDto.deliveryTimeToMinutes / 480); // 480 = 8horas diarias
                                        timePresentation = ' até ' + deliveryDays + ' dia' + (deliveryDays > 1 ? 's' : '');
                                    } else if (shippingMethodDto.deliveryTimeToMinutes > 60) {
                                        var deliveryHours = Math.floor(shippingMethodDto.deliveryTimeToMinutes / 60);
                                        var remainingMinutes = shippingMethodDto.deliveryTimeToMinutes % 60;
                                        timePresentation = ' até ' + deliveryHours + ' hora' + (deliveryHours > 1 ? 's' : '');

                                        if (remainingMinutes > 0) {
                                            timePresentation += ' e ' + remainingMinutes + ' minuto' + (remainingMinutes > 1 ? 's' : '');
                                        }
                                    } else {
                                        timePresentation = ' até ' + shippingMethodDto.deliveryTimeToMinutes + ' minuto' + (shippingMethodDto.deliveryTimeToMinutes > 1 ? 's' : '');
                                    }
                                }



                                $destinyElement.append(
                                        '<div class="radio">' +
                                            '<label>' +
                                                '<input type="radio" class="shipping-method shipping-method-' + shoppingStore
                                                    + '" name="shipping-method-' + uid + '" data-price="' + shippingMethodDto.price + '" data-isfreedelivery="'
                                                    + (shippingMethodDto.isFreeDelivery?'true':'false') +'" value="' + shippingMethodValue
                                                    + '" ' + (i == 0 ? 'required' : '') + '"> ' +

                                                shippingMethodDto.presentation +
                                                (pickUpOnPlaceAnyTime ? '' : timePresentation)
                                                    + (
                                                        shippingMethodDto.price > 0
                                                        ? ' R$ ' + String(Number(shippingMethodDto.price).toFixed(2)).replace('.', ',')
                                                        : ''
                                                    )
                                                    + (isPickUpOnPlace ? ' ' + pickUpOnPlaceAddress : '') +
                                            '</label>' +
                                        '</div>' + buildScheduledDeliveryPeriodsContainer(shippingMethodDto, shoppingStore, shippingMethodName)
                                );
                            }
                        });

                        if (shippifyScheduledDeliveries.length) {
                            let firstShippifyScheduledDelivery = shippifyScheduledDeliveries[0],
                                value = firstShippifyScheduledDelivery.shippingMethodConfigurationId.split(':').pop();

                            $destinyElement.append('<div class="radio">' +
                                '<label>' +
                                '<input type="radio" class="shipping-method-shippify" name="shipping-shippify-' + value + '" value="' + value + '" >' +
                                firstShippifyScheduledDelivery.presentation +
                                '</label>' +
                                '</div>' + buildShippifyScheduledDeliveriesPeriodsContainer(shippifyScheduledDeliveries, uid)
                            );
                        }

                        $destinyElement.show().find("input").on("click", function() {
                            if ($(this).hasClass("scheduledDelivery")) {
                                return '';
                            }
                            let $this = $(this),
                                $section = $this.parents(".shopping-store-shipping");

                            $section.find('.product-destination-address').val(addressId);
                            $section.find('.product-shipping-method[data-shopping-store=' + shoppingStore + ']').val($this.val());
                            $section.find('.product-shipping-method-is-freedelivery[data-shopping-store=' + shoppingStore + ']').val($this.data('isfreedelivery'));
                            $section.find('.product-scheduleloadCod-delivery-period[data-shopping-store=' + shoppingStore + ']').val('');
                            $section.find(".product-shipping-method").val($(this).val());

                            if ($(this).hasClass("shipping-method-shippify")) {
                                $section.find(".product-shipping-method").val($(this).parents(".shipping-estimate").first().find(".scheduled-shippify-option").first().val());
                                return '';
                            }

                            let isScheduledShippify = $(this).hasClass('scheduled-shippify-option');

                            if (!isScheduledShippify) {
                                $section.find('.scheduled-shippify-options').first().addClass('hidden');
                                $section.find('.shipping-method-shippify').first().removeProp('checked');
                            }

                            recalculatePrice();
                            toggleFreePaymentMethod();
                            loadBoletoRules();
                            loadInstallments();
                            recalculateAliquots(billingTotalWithTaxesWithoutShippingIpiTotal);
                            changeScheduledDeliveryPeriod(shoppingStore);
                        });
                        togglePeriod(shoppingStore);
                    });
                }

                let $estimate = $("#shipping-list"),
                    $shippingMessage = $(".shipping-message"),
                    url = '{{ path("flexy_ftwo_store_shipping_methods_list_all_carts_with_carts", {'zipCode': 'zipCode'}) }}';

                $.ajax({
                    url : url.replace("zipCode", postcode),
                    method : 'get',
                    beforeSend : function() {
                        $(".product-shipping-method").val('');
                        $('input:radio[name=address]').attr('disabled', true);
                        $('input:radio[name=address]').parent().css({ 'opacity' : 0.5 });
                        $("#aliquots").hide();
                        $estimate.html("<span class=\"loading-shipping-methods\"><i class=\"fa fa-spinner fa-spin\"></i> <label><strong>Buscando métodos de entrega...</strong></label></span>");
                        $shippingMessage.html("");
                    },

                    success : function(response) {
                        if(response.shippingMethodGroupDtos && !isPurchaseDigitalProducts){
                           var shippingMethodGroupDtos = Object.entries(response.shippingMethodGroupDtos).shift();
                               if(shippingMethodGroupDtos[1].shippingMethodDto.general){
                                    alert(shippingMethodGroupDtos[1].shippingMethodDto.general)
                               }
                        }

                        if(response.general){
                            alert(response.general)
                        }

                        $(".product-shipping-method").val('');
                        $('input:radio[name=address]').attr('disabled', false);
                        $('input:radio[name=address]').parent().css({ 'opacity' : 1 });

                        if (isPurchaseDigitalProducts) {
                          $estimate.html("Os itens que compõem o carrinho são todos digitais sendo assim não demandam entrega.");
                          return;
                        }

                        shippingEstimateSuccess(response);
                    },
                    error : function(response) {
                        let responseJSON = response.responseJSON;
                        if (responseJSON && responseJSON.startsWith("Insufficient stock")) {
                            const regex = '/(?<=for).*$/';
                            alert("O seguinte produto não possui estoque: " + responseJSON.match(regex));
                            window.location.href = "{{ path("flexy_ftwo_store_cart_list") }}";
                            return;
                        }

                        if (isPurchaseDigitalProducts) {
                          $estimate.html("Os itens que compõem o pedido são todos digitais sendo assim não demandam entrega.");
                          return;
                        }

                        $estimate.html("<span class=\"error-loading-shipping-methods\"><label>Erro ao buscar métodos de entrega. <a href=\".\">Recarregue a página e tente novamente.</a></label></span>");
                        $shippingMessage.html("");
                    }
                });
            }

            function loadShippingMethods(addressId, postcode) {
                {% if cart.hasSales %}
                    loadShippingMethodsForAllCartsByAddress(addressId, postcode);
                {% else %}
                    loadShippingMethodsSingleCart(addressId);
                {% endif %}
            }

            function loadBoletoRules() {
                let $boletoRules = $(".boleto-faturar-rules");

                let selectedShippingMethods = [];
                $(".product-shipping-method").each(function() {
                    let $this = $(this),
                        storeReferenceCode = $this.parent().attr('referenceCode');

                    const referenceCodeExists = selectedShippingMethods.some(shippingMethod => shippingMethod.referenceCode === storeReferenceCode);
                    if(!referenceCodeExists) {
                        let shippingMethod = {
                            configurationId: $this.attr('value'),
                            referenceCode: storeReferenceCode
                        }
                        if(shippingMethod.configurationId) {
                            selectedShippingMethods.push(shippingMethod);
                        }
                    }
                });

                $.ajax({
                    url : '{{ path('flexy_ftwo_store_checkout_rules') }}',
                    dataType : 'json',
                    data : {
                        value : billingTotalWithTaxes,
                        shippingMethods : selectedShippingMethods
                    },
                    success (rules) {
                    	let html = '<p class=\'boleto-seleciona\'>Selecione a opção de parcelamento desejada:</p>',
                            multipleSales = rules.some(rule => rule.shoppingStore !== null);

                        if(!rules.length) {
                            return $boletoRules.html('Não disponível para o valor da compra.');
                        }

                        if (multipleSales) {
                            $('#shipping-list > [referenceCode]')
                                .each(function (index, elem) {
                                    const referenceCode = $(elem).attr('referenceCode')
                                    const name = $(elem).find('p > b').text()

                                    html += (`
                                        <div class="loja boleto-rule-store" data-referencecode="${referenceCode}">
                                            <h5 class="mb-0 mtop20">
                                                <strong>${name}</strong>
                                            </h5>
                                            <div class="rules"></div>
                                        </div>`)
                                    $boletoRules.html(html).find('input').on('click', recalculatePrice);
                                })
                                .each(function (index, elem) {
                                    const referenceCode = $(elem).attr('referenceCode');
                                    const shoppingRules = rules.some(rule => rule.shoppingStore === referenceCode)
                                        ? rules.filter(rule => rule.shoppingStore === referenceCode)
                                        : rules.filter(rule => rule.shoppingStore === null);

                                    let inputName = `checkout[paymentMethod][0][data][ruleBoleto][${referenceCode}]`;

                                    shoppingRules.forEach(function (rule) {
                                        $(`.boleto-faturar-rules .loja[data-referencecode="${referenceCode}"] > .rules`).append(`
                                            <div class="radio">
                                            <label class="" style="margin-top: 0 !important">
                                                <input name="${inputName}"
                                                    value="${rule.rule}" data-discount="${rule.pDiscount.replace(',', '.')}"
                                                    type="radio" data-addition="${rule.pAddition.replace(',', '.')}"
                                                    data-shopping-store="${referenceCode}" />
                                                <span>${rule.label}</span>
                                            </label>
                                        </div>`);
                                    });

                                    $(`input[name="${inputName}"]`).change(function() {
                                        recalculatePrice();
                                    });
                                });
                            return;
                        }

                        let inputName = "checkout[paymentMethod][0][data][ruleBoleto]";
                        $('.boleto-faturar-rules').empty();

                        rules.forEach(rule => $('.boleto-faturar-rules').append(`
                            <div class="radio">
                                <label class="" style="margin-top: 0 !important">
                                    <input name="${inputName}"
                                        value="${rule.rule}" data-discount="${rule.pDiscount.replace(',', '.')}"
                                        type="radio" data-addition="${rule.pAddition.replace(',', '.')}"/>
                                    <span>${rule.label}</span>
                                </label>
                            </div>`)
                        );

                        $(`input[name="${inputName}"]`).change(function() {
                            recalculatePrice();
                        });
                    },
                    error: () => $boletoRules.html("Não disponível")
                });
            }

            function configCreditCardDiscountText(brandName) {
                let creditCardDiscountText = '',
                    currentCreditCardDiscount;

                {% for creditCard in store.paymentMethod.creditCards %}
                    currentCreditCardDiscount = '{{ (creditCard)?creditCard.discount:null }}';

                    if (brandName == '{{ creditCard ? creditCard.referenceCode }}' && currentCreditCardDiscount > 0) {
                        creditCardDiscountText = '(' + currentCreditCardDiscount + '% de desconto)'
                    }
                {% endfor %}

                return creditCardDiscountText;
            }

            function hasSubscriptionPlan() {
                return $("select[name='checkout[subscription_plan_id]']").length > 0;
            }

            function loadInstallments() {
                let brand = $("[name='checkout[paymentMethod][0][name]']:checked").val();
                let subscriptionPlan = $("select[name='checkout[subscription_plan_id]']").val();

                if (!brand) {
                    $('select[name="checkout[paymentMethod][0][data][installments]"]').html("<option>Selecione uma bandeira e um método de envio.</option>");
                    return;
                }

                function updateInstallments (installments) {
                let installmentsSelectBox = $('select[name="checkout[paymentMethod][0][data][installments]"]'),
                    brandName = $('input[name="checkout[paymentMethod][0][name]"]:checked').val(),
                    options = ['<option>Selecione</option>'],
                    creditCardDiscountText = hasSubscriptionPlan() && subscriptionPlan ? '' : configCreditCardDiscountText(brandName),
                    taxRate = installments[0]['tax_rate'];

                if (installments.length) {
                    $.each(installments[0]['no_tax'], function(qty, amount) {
                        let discountText = qty == 1 && creditCardDiscountText ? creditCardDiscountText : '';
                        let Aliq = aliquotsValue/qty;
                        let totalWithAliq = amount + Aliq;

                        let optionText = qty == 1 ? qty + ' x de R$ ' + $.number(totalWithAliq, 2, ',', '.') + ' sem juros' : qty + ' x de R$ ' + $.number(totalWithAliq, 2, ',', '.') + ' sem juros ' + discountText,
                            optionValue = brandName + '.' + qty + '.no_tax',
                            optionId = String(optionValue).split('.').join('-'),
                            optionTotal = qty * amount;

                        options.push("<option id=" + optionId +" value="+ optionValue +" data-total="+totalWithAliq+" data-installment="+qty+">"+optionText+"</option>\n");

                        $(installmentsSelectBox).on("change", function() {
                            let creditCardPaymentDiscount = 0,
                                currentCreditCardDiscount;

                            {% for creditCard in store.paymentMethod.creditCards  if creditCard %}
                                currentCreditCardDiscount = '{{ (creditCard)?creditCard.discount:null }}';

                                if (brandName == '{{ (creditCard)?creditCard.referenceCode:null }}' && currentCreditCardDiscount > 0) {
                                    creditCardPaymentDiscount = Math.round((Math.round(billingTotal * 100) / 100) * currentCreditCardDiscount) / 100;
                                }
                            {% endfor %}

                            $(".discount-creditcard").css("display", "none");
                            let installmentsData = $("option:selected", this).attr("data-installment");

                            if (installmentsData == 1 && creditCardDiscountText != "") {
                                let totalData = $("option:selected", this).attr("data-total");
                                $(".discount-creditcard").css("display", "item-list");

                                $(".discount-creditcard-total").text($.number(creditCardPaymentDiscount, 2, ',', '.'));
                                $(".discount-creditcard-total").attr("data-discount", creditCardPaymentDiscount);
                                $(".billing-total").text($.number(totalData, 2, ',', '.'));
                            } else if (installmentsData == qty) {
                                $(".discount-creditcard").css("display", "none");
                                $(".billing-total").text($.number(optionTotal, 2, ',', '.'));
                            }
                        });
                    });

                    $.each(installments[0]['tax'], function(qty, amount) {
                        let optionText = qty + ' x de R$ ' + $.number(amount, 2, ',', '.') + ' com juros',
                            optionValue = brandName + '.' + qty + '.tax',
                            optionId = String(optionValue).split('.').join('-'),
                            optionTotal = qty * amount;

                        options.push("<option id="+ optionId +" value="+optionValue+" data-tax-rate='"+taxRate+"' data-total="+optionTotal+" data-installment="+qty+">"+optionText+"</option>\n");
                    });
                }

                installmentsSelectBox.html(options.join(""));
            }

            let creditCardRegex = /\.creditcard\./;
            if (creditCardRegex.test(brand)) {
                $.ajax({
                    url: '{{ path('flexy_ftwo_store_checkout_installments_list') }}',
                    method: 'get',
                    data: {
                        brandCard: brand,
                        shippingPrice: shippingTotal - shippingDiscount,
                        icmsTotal: icmsTotal,
                        shippingIpiTotal: shippingIpiTotal,
                        subscriptionPlan: subscriptionPlan
                    },
                    beforeSend: function () {
                        $('select[name="checkout[paymentMethod][0][data][installments]"]').html("<option>Calculando parcelas...</option>");
                    },
                    success: function (response) {
                        if($('input[name="checkout[paymentMethod][0][name]"]:checked').val().indexOf("payment.method.creditcard") !== -1){
                            updateInstallments(response);
                        }
                    }
                });
            }
        }
            function subscriptionPlanChange() {
                if(hasSubscriptionPlan()) {
                    $(document).on('change', "select[name='checkout[subscription_plan_id]']", function () {
                        loadInstallments();
                    });
                }
            }

            function isAllShippingMethodSelected() {
                let values = {};

                $(".shipping-method").each(function(){
                    let $this = $(this),
                        isChecked = false;

                    if((isChecked = $this.is(':checked')) || $.inArray($this.attr('name'), Object.keys(values)) < 0) {
                        values[$this.attr('name')] = isChecked;
                    }
                });

                for(let name in values) {
                    if (!values[name]) {
                        return false;
                    }
                }

                return true;
            }

            function showShoppingPickupAlert() {
                
                $(".shopping-store-shipping").each(function() {
                    let shopRefCode = $(this).attr("referencecode");

                    isShoppingPickUpSelected(shopRefCode);
                });
            }


            function isShoppingPickUpSelected(shopRefCode) {
                $(".shopping-store-shipping[referencecode='" + shopRefCode + "']").each(function() {
                    let shopName = $(this).find('div p b').text();

                    $(this).find('.shipping-method').each(function() {
                        let labelText = $(this).parent().text();

                        if (labelText.includes('Retirar na loja')) {
                            if ($(this).prop('checked')) {

                                if(!isAllScheduledDeliverySelected(shopRefCode)){
                                    alert("Selecione um horário de retirada para " + shopName);
                                    return;
                                }
                            }
                        }
                    });

                });

                return;
            }

            function isAllScheduledDeliverySelected(shopRefCode) {
                let values = {};

                $(".shopping-store-shipping[referencecode='" + shopRefCode + "']").each(function() {

                    $(this).find('.scheduledDelivery').each(function() {
                        let $this = $(this),
                            isChecked = false;

                        if((isChecked = $this.is(':checked')) || $.inArray($this.attr('name'), Object.keys(values)) < 0) {
                            values[$this.attr('name')] = isChecked;
                        }
                    });

                });

                for(let name in values) {
                    if (!values[name]) {
                        return false;
                    }
                }

                return true;
            }

            function togglePaymentMethod() {
                let paymentMethod = $("[name='checkout[paymentMethod][0][name]']:checked").val(),
                    isBoleto = paymentMethod == "payment.method.boleto",
                    isBoletoAFaturar = paymentMethod == "payment.method.boletoafaturar",
                    isDeposit = paymentMethod == "payment.method.deposit",
                    isNegotiable = paymentMethod == "payment.method.negotiable",
                    isPix = paymentMethod == "payment.method.pix",
                    isApplePay = paymentMethod == "payment.method.digitalwallet.applepay",
                    isPicPay = paymentMethod == "payment.method.digitalwallet.picpay",
                    isCreditCard = !Boolean(paymentMethod) || paymentMethod.indexOf("payment.method.creditcard") != -1;

                $(".discount-boleto")[isBoleto || isBoletoAFaturar ? "show" : "hide"]();
                $(".addition-boleto")[isBoleto || isBoletoAFaturar ? "show" : "hide"]();
                $(".discount-negotiable")[isNegotiable ? "show" : "hide"]();
                $(".discount-deposit")[isDeposit ? "show" : "hide"]();
                $(".discount-pix")[isPix ? "show" : "hide"]();
                $(".discount-applepay")[isApplePay ? "show" : "hide"]();
                $(".discount-picpay")[isPicPay ? "show" : "hide"]();

                $(".discount-creditcard")[!isCreditCard ? "hide" : "hide"]();
                $(".boleto-faturar-rules")[!isBoletoAFaturar ? "hide" : "show"]();
                $(".payment-method-fields")
                    [isCreditCard ? "show" : "hide"]().find(":input").not("select[name='checkout[subscription_plan_id]']")
                    [isCreditCard ? "attr" : "removeAttr"]("required", "required");
            }

            function uncheckCreditCardBrand() {
                let paymentMethodChecked = $("[name='checkout[paymentMethod][0][name]']:checked").val(),
                        isCreditCard = !Boolean(paymentMethodChecked) || paymentMethodChecked.indexOf("payment.method.creditcard") != -1;

                if(isCreditCard) {
                    $("[name='checkout[paymentMethod][0][name]']").prop("checked", false);
                }
            }

            function uncheckDigitalWallet() {
                let paymentMethodChecked = $(".nav-wallets [name='checkout[paymentMethod][0][name]']:checked").val(),
                        isDigitalWallet = !Boolean(paymentMethodChecked) || paymentMethodChecked.indexOf("payment.method.digitalwallet") != -1;

                if(isDigitalWallet) {
                    $(".nav-wallets [name='checkout[paymentMethod][0][name]']").prop("checked", false).trigger('change');
                    $(".payment-method-fields").hide();
                }
            }
            function toggleFreePaymentMethod() {
                if (isAllShippingMethodSelected()) {
                    if (billingTotalWithTaxes <= 0) {
                        $('#tab-forfree').show();
                        $('#tab-negotiable').hide();
                        $('#tab-credit-card').hide();
                        //$('#tab-boleto').hide();
                        $('#tab-bank-deposit').hide();
                        $('#tab-boleto-faturar').hide();
                        $('#tab-pix').hide();
                        $('#tab-digitalwallet').hide();

                        $('#tab-forfree a').trigger('click');
                        $('[name="checkout[paymentMethod][0][name]"][value="payment.method.forfree"]')
                                .trigger('click')
                                .parents('.radio')[billingTotal > 0 ? "hide" : "show"]();
                        return;
                    }

                    $('#tab-forfree').hide();
                    $('#tab-credit-card').show();
                    $('#tab-negotiable').show();
                    $('#tab-bank-deposit').show();
                    $('#tab-boleto-faturar').show();
                    $('#tab-credit-card').show();
                    $('#tab-boleto').show();
                    $('#tab-pix').show();
                    $('#tab-digitalwallet').show();
                    $('#tab-credit-card a').trigger('click');
                }
            }

            function toggleResale() {
                let isResale = $("[name='checkout[isResale]']").is(":checked");

                if (!isResale) {
                    icmsTotal = 0;

                    $(".icms").css("display", "none");
                    recalculatePrice();

                    return false;
                }

                calculateTaxSubstitution();
            }

            async function calculateShippingIpi() {
                function buildCart(cart) {
                    let cartDto = {
                        items: [],
                        shippingTotal: getShippingTotalByCart(cart)
                    };

                    cart.items.forEach((item) => {
                        cartDto.items.push({
                            price: item.totalPriceWithDiscount,
                            quantity: 1,
                            ipiTax: item.ipiTax
                        })
                    });

                    return cartDto;
                }

                function sendRequest(data) {
                    return fetch('{{ path('flexy_ftwo_store.controller.tax_ipi') }}', {
                        method: "POST",
                        body: JSON.stringify(data)
                    })
                    .then(response => response.json());
                }

                let shippingIpiPromises = [];


                $(".address-box input[type='radio']").attr("disabled", "disabled");
                $(".no-icms input[type='checkbox']").attr("disabled", "disabled");

                if (CART.sales.length === 0) {
                    shippingIpiPromises.push(sendRequest(buildCart(CART)));
                } else {
                    for (const cart of CART.sales) {
                        await new Promise(resolve => setTimeout(resolve, 500));
                        shippingIpiPromises.push(sendRequest(buildCart(cart)));
                    }
                }

                const responses = await Promise.all(shippingIpiPromises);

                shippingIpiTotal = 0;
                responses.forEach(sale => {
                    shippingIpiTotal += sale.shippingIpiTotal ?? 0;
                });

                let billingPartialWithTaxes = billingTotal + shippingTotal - shippingDiscount
                    + icmsTotal + shippingIpiTotal - paymentDiscount;

                $(".billing-total").html($.number(billingPartialWithTaxes, 2, ',', '.'));
                $(".shipping-ipi-total").html($.number(shippingIpiTotal, 2, ',', '.'));

                $(".shipping-ipi").css("display", shippingIpiTotal > 0 ? "block" : "none");

                $(".address-box .radio input[type='radio']").removeAttr("disabled");
                $(".no-icms input[type='checkbox']").removeAttr("disabled");

                if(!CART.isBooking) {
                    recalculateAliquots(billingTotalWithTaxesWithoutShippingIpiTotal);
                }
            }

            function getShippingTotalByCart(cart) {
                let shippingMethod,
                    shippingTotal,
                    shippingDiscount;

                if (CART.sales.length === 0) {
                    shippingTotal = $('.shipping-method:checked').data("price") ?? 0;
                    shippingDiscount = $('.shipping-method:checked').data("shipping-discount") ?? 0;
                    shippingTotal = parseFloat(shippingTotal - shippingDiscount);
                    return shippingTotal;
                }

                shippingMethod = $('input:hidden[data-variant-id="'+cart.items[0].variant.id+'"]').val();
                shippingTotal = $('input:radio[value="'+shippingMethod+'"].shipping-method').data("price") ?? 0;
                shippingDiscount = $('input:radio[value="'+shippingMethod+'"].shipping-method').data("shipping-discount") ?? 0;
                shippingTotal = parseFloat(shippingTotal - shippingDiscount);

                if (isNaN(shippingTotal)) {
                    shippingTotal = 0;
                }
                return shippingTotal;
            }

            function calculateTaxSubstitution() {
                if (!$("[name='checkout[isResale]']").is(":checked")) {
                    {% if showShippingIpi %}
                        calculateShippingIpi();
                    {% endif %}
                    $(".billing-total").html($.number(billingTotal + shippingTotal - paymentDiscount, 2, ',', '.'));
                    return false;
                }

                function getShippingSettings() {
                    let $address = $(".address:checked");

                    if (CART.sales.length === 0) {
                        let shippingTotal = $('.shipping-method:checked').data("price") ?? 0,
                            shippingDiscount = $('.shipping-method:checked').data("shipping-discount") ?? 0;

                        if (shippingDiscount && shippingTotal) {
                            shippingTotal -= shippingDiscount;
                        }

                        return {
                            postcode: $address.data("postcode"),
                            carts: [
                                {
                                    id: CART.id,
                                    shippingTotal
                                }
                            ],
                        };
                    }

                    let shippingSettings = {
                        postcode: $address.data("postcode"),
                        carts: [],
                    }

                    CART.sales.forEach((cart) => {
                        let shippingTotal = getShippingTotalByCart(cart);

                        shippingSettings.carts.push({
                            id: cart.id,
                            shippingTotal: shippingTotal
                        });
                    });

                    return shippingSettings;
                }

                let xhr = $.ajax({
                    url: '{{ path('flexy_ftwo_store_taxSubstitution_calculate_cart') }}',
                    method: 'post',
                    data: getShippingSettings(),
                    beforeSend:function () {
                        $(".address-box input[type='radio']").attr("disabled", "disabled");
                        $(".no-icms input[type='checkbox']").attr("disabled", "disabled");
                    }
                });

                xhr.then(function(taxes) {
                    icmsTotal = 0;
                    shippingIpiTotal = 0;

                    for (let i = 0; i < taxes.length; i++) {
                        icmsTotal += taxes[i].taxBilled;
                        shippingIpiTotal += taxes[i].shippingIpi;
                    }

                    $(".icms-total").html($.number(icmsTotal, 2, ',', '.'));
                    $(".icms").css("display", icmsTotal > 0 ? "block" : "none");

                    $(".shipping-ipi-total").html($.number(shippingIpiTotal, 2, ',', '.'));
                    $(".shipping-ipi").css("display", shippingIpiTotal > 0 ? "block" : "none");

                    let billingPartialWithTaxes = billingTotal + shippingTotal
                        + icmsTotal + shippingIpiTotal - paymentDiscount;

                    $(".billing-total").html($.number(billingPartialWithTaxes, 2, ',', '.'));
                    $(".address-box .radio input[type='radio']").removeAttr("disabled");
                    $(".no-icms input[type='checkbox']").removeAttr("disabled");
                });

                xhr.fail(function() {
                    icmsTotal = 0;
                    $(".address-box .radio input[type='radio']").removeAttr("disabled");
                    $(".no-icms input[type='checkbox']").removeAttr("disabled");
                });

                return xhr;
            }

            function recalculatePrice() {
                var paymentMethod = $("[name='checkout[paymentMethod][0][name]']:checked").val() || "",
                    creditCardRegex = new RegExp("payment\.method\.creditcard\..+"),
                    isCreditCard = creditCardRegex.test(paymentMethod),
                    isBoleto = paymentMethod === "payment.method.boleto",
                    isBoletoFaturar = paymentMethod === "payment.method.boletoafaturar",
                    discountBoletoRuleRate = 0,
                    additionBoletoRuleRate = 0,
                    paymentAddition = 0,
                    additionBoleto = 0,
                    percentageBoletoRuleRate = true;

                paymentDiscount = 0;

                if (isBoletoFaturar) {
                    [discountBoletoRuleRate, additionBoletoRuleRate, percentageBoletoRuleRate] = getBoletoRulesValues();
                }

                let discountBoletoRate = isBoletoFaturar
                    ? discountBoletoRuleRate
                    : Number("{{ (store.paymentMethod.boleto) ? store.paymentMethod.boleto.discount/100 : null }}");

                let discountBoleto = billingTotal * discountBoletoRate;

                if (isBoletoFaturar) {
                    if (additionBoletoRuleRate > 0) {
                        let additionBoletoRate = isBoletoFaturar
                            ? additionBoletoRuleRate
                            : Number("{{ (store.paymentMethod.boleto) ? store.paymentMethod.boleto.addition/100 : null }}");
                        additionBoleto = billingTotal * additionBoletoRate;
                    }
                }

                if (isBoletoFaturar || isBoleto) {
                    paymentDiscount = Math.round(discountBoleto * 100) / 100;
                    paymentAddition = Math.round(additionBoleto * 100) / 100;
                }

                if (isBoletoFaturar && !percentageBoletoRuleRate) {
                    discountBoleto = paymentDiscount = discountBoletoRuleRate;
                    additionBoleto = paymentAddition = additionBoletoRuleRate;
                }

                shippingTotal = 0;

                let shippingTotalForDiscount = 0,
                    hasAnyShippingDiscount = false;

                $.each($(".shipping-method:checked"), function() {
                    let shippingPrice = Number($(this).data('price')),
                        hasShippingDiscount = $(this).parents('.shopping-store-shipping').data('has-shipping-discount');

                    hasAnyShippingDiscount |= hasShippingDiscount;
                    shippingTotal += shippingPrice;

                    if (hasShippingDiscount) {
                        shippingTotalForDiscount += shippingPrice;
                    }
                    {% if showShippingIpi %}
                        calculateShippingIpi();
                    {% endif %}
                });

                if (hasAnyShippingDiscount) {
                    shippingDiscount = 0;

                    {% if cart.getSubSalesCoupon.promotion.discountMoney %}
                        shippingDiscount = parseFloat("{{ cart.getRemainingCouponDiscount }}");
                    {% elseif cart.getSubSalesCoupon.promotion.discountPercent %}
                        shippingDiscount = Math.round(shippingTotalForDiscount * parseFloat("{{ cart.getRemainingCouponDiscount }}")) / 100;
                    {% endif %}

                    shippingDiscount = Math.min(shippingDiscount, shippingTotalForDiscount);
                }

                let shippingDiscountCalculator = new CheckoutShippingDiscountCalculator(shippingDiscount);
                shippingDiscountCalculator.calculate();

                let totalDiscount = parseFloat("{{ cart.salePromotionDiscountTotal }}") + shippingDiscount;

                totalBillingDiscount = paymentDiscount + totalDiscount;
                billingTotalWithTaxes = billingTotal - shippingDiscount - paymentDiscount + paymentAddition + shippingTotal + icmsTotal + shippingIpiTotal;
                billingTotalWithTaxesWithoutShippingIpiTotal = billingTotal - shippingDiscount - paymentDiscount + paymentAddition + shippingTotal + icmsTotal;

                //show totals
                $(".icms-total").html($.number(icmsTotal, 2, ',', '.'));
                $(".discount-boleto-total").html($.number(discountBoleto, 2, ',', '.'));
                $(".addition-boleto-total").html($.number(additionBoleto, 2, ',', '.'));
                $(".discount-boleto-total").attr("data-discount", discountBoleto);
                $(".addition-boleto-total").attr("data-addition", additionBoleto);

                let intDiscountBoleto = parseFloat(discountBoleto),
                    intAdditionalBoleto = parseFloat(additionBoleto);

                if (intDiscountBoleto > 0 && (isBoletoFaturar || isBoleto)) {
                    $(".discount-boleto").show();
                }

                if (intDiscountBoleto == 0) {
                    $(".discount-boleto").hide();
                }

                if (intAdditionalBoleto > 0 && (isBoletoFaturar || isBoleto)) {
                    $(".addition-boleto").show();
                }

                if (intAdditionalBoleto == 0) {
                    $(".addition-boleto").hide();
                }

                $(".shipping-total").html($.number(shippingTotal, 2, ',', '.'));

                $(".billing-total").html($.number(billingTotalWithTaxes, 2, ',', '.'));
                $(".discount-total-value").html($.number(totalDiscount, 2, ',', '.'));
                $("#installments-tax").attr("hidden", "hidden");

                if (isCreditCard) {
                    recalculateInstallmentTax(billingTotalWithTaxes);
                    loadInstallments();
                }

                $(".aliquot").hide();
                setAliquotVariables(shippingTotal, paymentDiscount, billingTotalWithTaxesWithoutShippingIpiTotal);
                recalculateAliquots(billingTotalWithTaxes);
            }

            async function updateCartInformation() {
                const cartUpdatedResponse = await fetch('{{ path("flexy_ftwo_store_update_cart_object")}}');
                const cartUpdated = await cartUpdatedResponse.json();
                CART = cartUpdated;
            }

            function getBoletoRulesValues() {
                updateCartInformation();

                let discountBoletoRuleRate = Number($("[name='checkout[paymentMethod][0][data][ruleBoleto]']:checked").data("discount") || 0) / 100,
                    additionBoletoRuleRate = Number($("[name='checkout[paymentMethod][0][data][ruleBoleto]']:checked").data("addition") || 0) / 100,
                    percentageBoletoRuleRate = true,
                    $boletoRuleStores = $('.boleto-rule-store');

                if ($boletoRuleStores.length) {
                    discountBoletoRuleRate = 0;
                    additionBoletoRuleRate = 0;

                    $boletoRuleStores.each(function () {
                        let $input = $(this).find("input[type='radio']:checked");
                        if (!$input.length) {
                            return;
                        }

                        let shoppingStoreCart = CART.sales.filter(sale =>  {
                            return sale.shoppingStoreReferenceCode === $input.attr('data-shopping-store')
                        }).pop();

                        discountBoletoRuleRate += shoppingStoreCart.totalWithDiscount
                            * ($input.data("discount") || 0) / 100;

                        additionBoletoRuleRate += shoppingStoreCart.totalWithDiscount
                            * ($input.data("addition") || 0) / 100;
                    });
                    percentageBoletoRuleRate = false;
                }

                return [
                    discountBoletoRuleRate,
                    additionBoletoRuleRate,
                    percentageBoletoRuleRate,
                ];
            }

            function recalculateInstallmentTax(total) {
                if ($(".active [name='checkout[paymentMethod][0][name]']").first().val().indexOf('payment.method.creditcard') !== -1) {

                    $("[name='checkout[paymentMethod][0][data][installments]']").on("change", function(e) {
                        let value = $(this).val();

                        if (value !="Selecione" && value.length > 10 && value.search("no_tax") === -1) {
                            let optionId = String(value).split('.').join('-'),
                                $option = $('#'+optionId)
                                totalWithInstallment = $option.data('total'),
                                numberOfInstallment = $option.data('installment'),
                                tax = totalWithInstallment - total;

                            if ($option.data('tax-rate') <= 0) {
                                tax = 0;
                            }

                            $(".billing-total").html($.number(totalWithInstallment, 2, ',', '.'));

                            if (!numberOfInstallment) {
                                $(".installments-tax").hide();
                            } else {
                                $(".number-of-installments").html('Juros para parcelamento em ' + numberOfInstallment + ' vezes:');
                                $(".installments-tax").show();
                                $(".installments-tax-total").html($.number(tax, 2, ',', '.'));
                                $("#installments-tax").show();
                            }
                        } else {
                            $("#installments-tax").hide();
                            if (value === "Selecione") {
                                totalWithInstallment  = billingTotalWithTaxes;
                                $(".billing-total").html($.number(billingTotal + shippingTotal - paymentDiscount, 2, ',', '.'));
                            }  
                        }
                    });
                }
            }

            $(".address").change(function() {
                loadShippingMethods($(this).val(), $(this).data('postcode')) ;
            });

            $("body").on("change", ".shipping-method-shippify", function () {
                if ($(this).is(":checked")) {
                    let $containerShippify = $("#containerShippifyScheduledDeliveryPeriods_" + $(this).val());
                    $containerShippify.removeClass('hidden');

                    let $parentElement = $(this).parents(".shipping-method-list").first();
                    if($(this).parents(".shopping-store-shipping").length) {
                        $parentElement = $(this).parents(".shopping-store-shipping").first();
                    }

                    let shoppingStoreId = $parentElement.prop('id').replace(/\D/g, '');

                    $containerShippify.find('.scheduled-shippify-option').first().prop('checked', 'checked');

                    $parentElement.find('.containerScheduledDeliveryPeriods')
                        .addClass('hidden');

                    if (shoppingStoreId) {
                        let $containerElements = $parentElement.find('.containerScheduledDeliveryPeriods' + shoppingStoreId);
                        $containerElements.addClass('hidden');
                        $containerElements.each(function() {
                            $(this).find("input[type='radio']:checked").removeProp('checked');
                        });
                        $(".shipping-method-" + shoppingStoreId).change();
                    }

                    $parentElement.find('.scheduledDelivery')
                        .removeProp('checked');

                    $(".shipping-method").change();
                    return true;
                }
                $containerShippify.addClass('hidden');
            });

            $("[name='checkout[isResale]']").on("change", function() {
                toggleResale();
            });

            $("[name='checkout[paymentMethod][0][name]']").on("change", function(e) {
                togglePaymentMethod();
                recalculatePrice();
            });

            $(".payment-box .nav-tabs [role=tab]").on("click", function(e) {
                if (($(".shipping-method").length == 0 || !isAllShippingMethodSelected()) && !isPurchaseDigitalProducts) {
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    alert("Selecione um endereço e uma forma de entrega.");
                    return false;
                }

                showShoppingPickupAlert();

                const $tab = $($(this).attr("href")),
                    isCreditCard = $(this).parent().prop('id') == 'tab-credit-card';
                    isDigitalWallet = $(this).parent().prop('id') == 'tab-digital-wallet';
                $("[name='checkout[paymentMethod][0][name]']").prop("checked", false);
                if(!isCreditCard && isAllShippingMethodSelected()) {
                    $tab.find("[name='checkout[paymentMethod][0][name]']:first").prop("checked", "checked").trigger("change");
                }

                if (($(".shipping-method").length === 0 || !isAllShippingMethodSelected()) && !isPurchaseDigitalProducts) {
                    return false;
                }

                togglePaymentMethod();
                recalculatePrice();
                calculateTaxSubstitution();
                if(isDigitalWallet) uncheckDigitalWallet();
            });

            $(".btn-checkout").click(function() {
                $("[name='checkout[anti-fraud][cart][total]']").val($(".billing-total").html())
            });

            subscriptionPlanChange();
            loadShippingMethods($(".address:checked").val(), $(".address:checked").data('postcode'));
            selectDefaultPaymentMethod();
            uncheckCreditCardBrand();
            togglePaymentMethod();
            recalculatePrice();
            {{ usesTaxSubstitution ? 'toggleResale();' }}
            removePreSelectedCreditCard();
            loadBoletoRules();
        })(jQuery);

        $(window).scroll(function () {
            let positionScroll = $(this).scrollTop(),
                referentialPosition = $("#total-absolute-referee").position().top - $('.block-order-total').height() + 30,
                position = $(this).scrollTop() - $(".header-main-fixed").height() - 30;

            if(positionScroll >= referentialPosition) {
                position = referentialPosition - 100;
            }

            if ($(this).scrollTop() > 80 && $(window).width() > 974) {
                $('.block-order-total').css({
                    position: 'absolute',
                    top: position,
                    width: '360px'
                });
            } else {
                $('.block-order-total').css({
                    position: 'relative',
                    top: '0',
                    width: 'auto'
                });
            }
        });
    </script>
    <script>
        $(document).ready(function () {
            $("form").on("submit", function () {
                // Evita múltiplos overlays
                if ($(".flexy-black-overlay").length === 0) {
                    var overlay = $(
                        "<div class='flexy-black-overlay'>" +
                        "    <div class='flexy-loading'>" +
                        "        <div class='loading-gif'></div>" +
                        "        <p>Processando pagamento, aguarde...</p>" +
                        "    </div>" +
                        "</div>"
                    );
                    $("body").append(overlay);
                }
            });
        });
    </script>
{% endblock %}